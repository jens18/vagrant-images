# -*- mode: ruby -*-
# vi: set ft=ruby :

# provisioning scripts start
$set_tz = <<SCRIPT
ln -s -f /usr/share/zoneinfo/US/Pacific /etc/localtime
SCRIPT

$yum_install = <<SCRIPT
# yum proxy
echo "proxy=http://www-proxy.us.oracle.com:80" >> /etc/yum.conf
# curl proxy
### setup curl HTTP proxy
export http_proxy=http://www-proxy.us.oracle.com:80
export https_proxy=https://www-proxy.us.oracle.com:80
# enable Yum repository containing Docker (Note: Docker version in ol7_addons is not the latest) 
# yum-config-manager --enable ol7_addons 
echo "[dockerrepo] \n\
name=Docker Repository \n\
baseurl=https://yum.dockerproject.org/repo/main/oraclelinux/7 \n\
enabled=1 \n\
gpgcheck=1 \n\
gpgkey=https://yum.dockerproject.org/gpg \n" > /etc/yum.repos.d/docker.repo
# yum update to refresh the local yum repository information
yum -y update
# enable X11 Windows desktop
yum -y groupinstall 'X Window System' 'GNOME'
# enable swap (1GB)
dd if=/dev/zero of=/swapfile bs=1M count=1024
mkswap /swapfile
swapon /swapfile
echo "/swapfile       swap       swap       defaults       0 0" >> /etc/fstab
# vncserver, emacs, firefox, docker 
yum -y install tigervnc-server emacs firefox docker-engine openconnect
# activate the new Docker service setting
systemctl daemon-reload
# start the Docker service
systemctl start docker.service
# start the Docker service every time the OS is restarted
systemctl enable docker.service
# configure Docker service to use http proxy (to download Docker containers)
mkdir -p /etc/systemd/system/docker.service.d
echo  "[Service] \n\
Environment=\"HTTP_PROXY=http://www-proxy.us.oracle.com:80\" \n\
Environment=\"HTTPS_PROXY=http://www-proxy.us.oracle.com:80\"\n" >  /etc/systemd/system/docker.service.d/http-proxy.conf
# docker compose
curl -L https://github.com/docker/compose/releases/download/1.5.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
# use docker client command without sudo
usermod -a -G docker vagrant
# Yum cache clean up to free up diskspace (approx. 500 MByte)
yum clean all
SCRIPT

# provisioning scripts end

# vm configuration
nodes_config = (JSON.parse(File.read("nodes.json")))['nodes']

VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "oraclelinux-7.1-x86_64"
  config.vm.box_url = "http://cloud.terry.im/vagrant/oraclelinux-7-x86_64.box"

  nodes_config.each do |node|
    node_name = node[0] # name of node
    node_values = node[1] # content of node
    
    config.vm.define node_name do |config|
      # configures all forwarding ports in JSON array
      ports = node_values['ports']
      ports.each do |port|
        config.vm.network :forwarded_port,
        host: port[':host'],
        guest: port[':guest'],
        id: port[':id']
      end
      
      config.vm.hostname = node_values[':node']
#
# a) NAT network, statically assigned addresses
# 
#      config.vm.network :private_network, ip: node_values[':ip']
#
# b) bridge network, DHCP assigned address
#
# Note: 
# 1) bridge: "eth0" specifies the host's network interface which should 
# be used for the bridge (for the VM the network interface will be
# determined dynamically)
# 2) different operating system use different interface names
# 3) Vagrant will prompt the user if the specified interface can not be found
#
      config.vm.network :public_network, type: "dhcp", bridge: "eth0"
#
      
      config.vm.provider :virtualbox do |vb|
        vb.customize ["modifyvm", :id, "--memory", node_values[':memory']]
        vb.customize ["modifyvm", :id, "--name", node_values[':node']]
      end
     config.vm.provision "shell", inline: $set_tz
     config.vm.provision "shell", inline: $yum_install
    end
  end
end 
